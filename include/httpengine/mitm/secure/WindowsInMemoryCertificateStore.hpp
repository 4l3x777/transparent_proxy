/*
* Copyright © 2017 Jesse Nicholson
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/


#pragma once

#include "BaseInMemoryCertificateStore.hpp"

namespace te
{
	namespace httpengine
	{
		namespace mitm
		{
			namespace secure
			{
				
				/// <summary>
				/// The WindowsInMemoryCertificateStore offers no functionality over the
				/// BaseInMemoryCertificateStore class, except to implement the platform specific,
				/// pure virtual functions declared in BaseInMemoryCertificateStore.
				/// </summary>
				class WindowsInMemoryCertificateStore : public BaseInMemoryCertificateStore
				{

				public:

					/// <summary>
					/// Default constructor, delegates to the parameterized constructure which takes
					/// country code, organization name and common name, with default values. Be
					/// advised that the constructor that this delegates to can throw.
					/// 
					/// Automatically writes the CA certificate generated at construction to a .pem
					/// file with the same name as was supplied for the CA Common Name property.
					/// </summary>
					WindowsInMemoryCertificateStore();

					/// <summary>
					/// Constructs a new WindowsInMemoryCertificateStore and generates a self signed CA
					/// certificate, storing the generated EVP_PKEY and X509 structures in the
					/// m_thisCaKeyPair and m_thisCa members respectively. This constructor invokes
					/// members that can throw.
					/// 
					/// Automatically writes the CA certificate generated at construction to a .pem
					/// file with the same name as was supplied for the CA Common Name property.
					/// </summary>
					/// <param name="countryCode">
					/// The country code for the self signed CA to be generated.
					/// </param>
					/// <param name="organizationName">
					/// The organization name for the self signed CA to be generated.
					/// </param>
					/// <param name="commonName">
					/// The common name for the self signed CA to be generated.
					/// </param>
					WindowsInMemoryCertificateStore(
						const std::string& countryCode,
						const std::string& organizationName,
						const std::string& commonName
						);

					virtual ~WindowsInMemoryCertificateStore();

					/// <summary>
					/// Attempts to install the current temporary root CA certificate for
					/// transparent filtering to the appropriate OS specific filesystem certificate
					/// store. This must be overridden in an os specific derrived class.
					/// 
					/// This method is assumed to throw in all derrived types, so runtime_errors
					/// need to be expected and correctly handled.
					/// </summary>
					/// <returns>
					/// True if the operation succeeded and the current temporary root CA
					/// certificate was installed to the appropriate OS filesystem certificate
					/// store. False otherwise.
					/// </returns>
					virtual bool EstablishOsTrust();

					/// <summary>
					/// Searches the OS filesystem certificate store for any installed root CA
					/// certificates generated by this program and deletes them. Although there
					/// isn't any harm in not doing this, not doing this would make an awful mess,
					/// potentially building up useless CA certificates in the client's OS. The
					/// private key is of course never stored with the certificates, but rather is
					/// kept in memory. This is just about cleaning up our garbage. This must be
					/// overridden in an os specific derrived class.
					/// 
					/// This method is assumed to throw in all derrived types, so runtime_errors
					/// need to be expected and correctly handled.
					/// </summary>
					virtual void RevokeOsTrust();

				};

			} /* namespace secure */
		} /* namespace mitm */
	} /* namespace httpengine */
} /* namespace te */

